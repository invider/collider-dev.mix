
-- in-scope functions 

-------------------------------------------------------------------
/alt
head: defines in-scope functions and objects
.
details:
This frame contains shortcuts to widely used functions, structures
and values.
To access those, you don't have to specify any container.
Just name the entity directly, e.g.:
    PI
    stroke(.2, .4, .5)
    line(10, 10, 100, 100)
    fill('#808080')
    rect(120, 120, 60, 60)
    kill(this)
.
notes:
You can define your own in-scope values.
But this is theoretical for now - I've never ever really checked :)


-------------------------------------------------------------------
/alt/line

head: draw a line 
usage: line(x1, y1, x2, y2)
details:
Usually preceided by stroke(color) and lineWidth(number) to set the style.


-------------------------------------------------------------------
/alt/key
head: the map of keys pressed at the moment 
usage: [code]
details:
The flags by [keyCode] or [key] will be *true*
when a corresponding key is down.

*[key]* - represent a unicode character behind the key (layout senseitive).

*[keyCode]* - represents a layout independant key code with first letter lower-cased (so traditional JS 'KeyA' becomes 'keyA'.

note: Use <a href='#./trap'>traps<a> when you need to track actual keypress events.

-------------------------------------------------------------------
/alt/mouse
head: contains mouse state - current and previous coordinates, buttons mask, plus mouse *out* flag
usage: { x, y, lx, ly, buttons, out }

-------------------------------------------------------------------
/alt/pad
head: returns the gamepad status object
usage: (gamepadId)
details:
When *gamepadId* is provided, returns particular gamepad state if connected. Overwise, returns array of all connected gamepad objects.


-------------------------------------------------------------------
/alt/mix
head: shallow copy all properties of passed objects into a new object
usage: (obj1, obj2, ...)

-------------------------------------------------------------------
/alt/augment
head: augment object by deeply copying properties from all supplied objects
usage: (target, obj1, ...)
details:
Properties with names *_*, *__*, *___*, *_$* are ignored,
since can cause a cycle.

No other properties that can cause a cycle should be
present in passed objects.

-------------------------------------------------------------------
/alt/supplement
head: supplement object by deeply copying missing properties from all supplied object
usage: ()
details:
Already set properties will be ignored.

Properties with names *_*, *__*, *___*, *_$* are ignored,
since can cause a cycle.

No other properties that can cause a cycle should be
present in passed objects.

-------------------------------------------------------------------
/alt/before
head: chain the supplied *patchFunction* before *obj.functionName*
usage: (obj, functionName, patchFunction)
details:
The original method, if present, is going to be replaced by a chain container.


-------------------------------------------------------------------
/alt/after
head: chain the supplied *patchFunction* after *obj.functionName*
usage: (obj, functionName, patchFunction)
details:
The original method, if present, is going to be replaced by a chain container function.

-------------------------------------------------------------------
/alt/chain
head: returns a chain container function that applies both functions
usage: (fn1, fn2)

-------------------------------------------------------------------
/alt/isFun
head: determines if *target* is a function
usage: (target)

-------------------------------------------------------------------
/alt/isObj
head: determines if *target* is an object
usage: (target)

-------------------------------------------------------------------
/alt/isString
head: determines if *target* is a String
usage: (target)

-------------------------------------------------------------------
/alt/isNumber
head: determines if *target* is a Number
usage: (target)

-------------------------------------------------------------------
/alt/isFrame
head: determines if *target* is a Frame
usage: (target)

-------------------------------------------------------------------
/alt/isArray
head: determines if *target* is an Array
usage: (target)

-------------------------------------------------------------------
/alt/isEmpty
head: checks if the *target* object/array is empty 
usage: (target)
details:
Returns true for undefined, null, '', 0, false.
Returns false for any non-object and non-array values.

-------------------------------------------------------------------
/alt/sfx
head: play a sound effect
usage: (sound, volume, panorama)

-------------------------------------------------------------------
/alt/kill
head: kill a node
usage: (node)
details: The *node* supposed to have a parent link, i.e. *node.__*.

-------------------------------------------------------------------
/alt/print
head: output a line on the text console
usage: (line)
details: The line is followed by a line feed.
Redefine /sys/print to change output target or behavior.

-------------------------------------------------------------------
/alt/input
head: input a value form the text console
usage: (message)
details: Returns a promise, so better used in *async*
functions along the *await* keyword.
Redefine /sys/input to change behavior.

-------------------------------------------------------------------
/alt/alert
head: show a message in the most convenient way for the current mode
usage: (message)
details: Redefine /sys/alert to change output target or behavior.

-------------------------------------------------------------------
/alt/ask
head: ask a value in the most convenient way for the current mode 
usage: (message)
details: Redefine /sys/alert to change output target or behavior.

