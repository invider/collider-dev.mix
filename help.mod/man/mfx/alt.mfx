
-- in-scope functions 

-------------------------------------------------------------------
/alt
head: defines in-scope functions and objects
.
details:
This frame contains shortcuts to widely used functions, structures
and values.
To access those, you don't have to specify any container.
Just name the entity directly, e.g.:
    PI
    stroke(.2, .4, .5)
    line(10, 10, 100, 100)
    fill('#808080')
    rect(120, 120, 60, 60)
    kill(this)
.
notes:
You can define your own in-scope values
by placing object and function definitions in mod/alt folder.


-------------------------------------------------------------------
/alt/key
head: the map of keys pressed at the moment 
usage: [code]
details:
The flags by [keyCode] or [keyChar] will be *true*
when a corresponding key is down.

*[keyChar]* - represent a unicode character behind the key (layout senseitive).

*[keyCode]* - represents a layout independant key code with first letter lower-cased (so traditional JS 'KeyA' becomes 'keyA'.

note: Use <a href='#./trap'>traps<a> when you need to track actual keypress events.

-------------------------------------------------------------------
/alt/mouse
head: contains mouse state - current and previous coordinates, buttons mask, plus mouse *out* flag
types:
@param {number} x - mouse pointer x coordinate
@param {number} y - mouse pointer y coordinate
@param {number} lx - mouse pointer previous x coordinate (dx = lx - x)
@param {number} ly - mouse pointer previous y coordinate (dy = ly - y)
@param {bitmask} buttons - a bitmask of the pressed buttons
@param {boolean} out - flag to mark the mouse out of the canvas

-- usage after types to redefine generated usage
usage: { x, y, lx, ly, buttons, out }

-------------------------------------------------------------------
/alt/pad
head: returns the gamepad status object
types:
    @param {number} gamepadId - id of the gamepad
    @returns {Gamepad} - an object representing the gamepad #[id] and it's state
details:
When *gamepadId* is provided, returns particular gamepad state if connected. Overwise, returns array of all connected gamepad objects.

-------------------------------------------------------------------
/alt/mix
head: shallow copy all properties of passed objects into a new object
types:
    @param {object} obj1 - first object to mix
    @param {object} obj2 - second object to mix
    @param ... - additional optional objects to mix
    @returns {object} - a new object with mixed in properties from all the sources


-------------------------------------------------------------------
/alt/augment
head: augment object by deeply copying properties from all supplied objects
types:
    @param {object} target - a target object to be augmented
    @param {object} obj1 - a first object to copy values from into the target
    @param ... - additional optional object for target augmentation
details:
Properties with names *_*, *__*, *___*, *_$* are ignored,
since can cause a cycle.

No other properties that can cause a cycle should be
present in the passed objects.

-------------------------------------------------------------------
/alt/supplement
head: supplement object by deeply copying missing properties from all supplied object
types:
    @param {object} target - a target object to be supplemented
    @param {object} obj1 - a first object to copy values from into the target
    @param ... - additional optional objects to supplement the target
details:
Already set properties will be ignored.
This is it's main difference with
<a href="./alt/augment">augment(target, obj1, ...)</a>,
which replaces already existing values.

Properties with names *_*, *__*, *___*, *_$* are ignored,
since can cause a cycle.

No other properties that can cause a cycle should be
present in passed objects.

-------------------------------------------------------------------
/alt/before
head: chain the supplied *patchFunction* before *obj.functionName*
usage: (obj, functionName, patchFunction)
types:
    @param {object} obj - a target object containing the function to chain
    @param {string} functionName - name of the method, e.g. object's property containing the function
    @param {function} patchFunction - a function to execute before the target function
details:
The original method, if present, is going to be replaced by
a chain container function that is responsible for the call
to patchFunction and than the original function.

Note, that the object context (this) is preserved among
all chained functions.



-------------------------------------------------------------------
/alt/after
head: chain the supplied *patchFunction* after *obj.functionName*
types:
    @param {object} obj - a target object containing the function to chain
    @param {string} functionName - name of the method, e.g. object's property containing the function
    @param {function} patchFunction - a function to execute after the target function
details:
The original method, if present, is going to be replaced by
a chain container function that is responsible for the call
to the original function and then to patchFunction.

Note, that the object context (this) is preserved among
all chained functions.

-------------------------------------------------------------------
/alt/chain
head: returns a chain container function that applies both functions
types:
    @param {function} fn1 - the first function in the call chain
    @param {function} fn2 - the second function in the call chain
    @returns {function} - the chain function that runs fn1, then fn2
details:
If just one function from the pair fn1/fn2 is present,
it will be returned instead of a chain function.

In case of both parameters missing,
an empty function will be returned.

The chain function preserves the context,
so when run on an object, both fn1 and fn2
will get that object as this.


-------------------------------------------------------------------
/alt/isFun
head: determines if *target* is a function
types:
    @param {any} target - any value to check
    @returns {boolen} - true if the passed value is a function


-------------------------------------------------------------------
/alt/isObj
head: determines if *target* is an object
types:
    @param {any} target - any value to check
    @returns {boolen} - true if the passed value is an object


-------------------------------------------------------------------
/alt/isString
head: determines if *target* is a String
types:
    @param {any} target - any value to check
    @returns {boolen} - true if the passed value is a string


-------------------------------------------------------------------
/alt/isNumber
head: determines if *target* is a Number
types:
    @param {any} target - any value to check
    @returns {boolen} - true if the passed value is a number


-------------------------------------------------------------------
/alt/isFrame
head: determines if *target* is a Frame
types:
    @param {any} target - any value to check
    @returns {boolen} - true if the passed value is a Frame


-------------------------------------------------------------------
/alt/isArray
head: determines if *target* is an Array
types:
    @param {any} target - any value to check
    @returns {boolen} - true if the passed value is an array


-------------------------------------------------------------------
/alt/isEmpty
head: checks if the *target* object/array is empty 
types:
    @param {any | object | array} target - an object or an array to check
    @returns {boolean} - true if object or array has any own values
details:
Returns true for undefined, null, '', 0, false.
Returns false for any non-object and non-array values.

For objects, only own properties are counted in.

-------------------------------------------------------------------
/alt/sfx
head: play a sound effect
types:
    @param {AudioClip} sound - an audio clip to play
    @param {number[0..1]} volume - sound volume
    @param {number[-1..1]} panorama - the placement of sound from left to right

-------------------------------------------------------------------
/alt/kill
head: kill a node
usage: (node)
types:
    @param {Node} node - a mix node to kill

details:
Before the kill, _node.onKill()_ handler
will be called if present.

If the *node* has a _kill()_ function it will be called
to do some custom clean up actions.
It is usually defined for objects in the pool,
when we don't want to detach a killed object
and want to reuse it instead later.
In that case, node.kill() can just raise the node.dead flag
and move on - the object pool have to take care and reuse the object
or it's slot.

In case there is no node.kill() method,
a regular parent.detach(node) will be called.
In that case, the *node* is supposed to have a parent link, i.e. *node.__*.

-------------------------------------------------------------------
/alt/defer
head: defer a function to run after a scheduled queue
types:
    @param {function} fn - a function to defer and run after

details:
Essentially, a more convenient way to run setTimeout(fn, 0)

-------------------------------------------------------------------
/alt/gtrap
head: root mod trap
types:
    @param {string} trapName - the name of a trap function
    @param {value} payload - trapping data to use by the trap function
    @returns {boolean} - true if propagated, false otherwise

details:
Essentially, a more convenient way to run trap in the global context.

Synonimous of running:

    _$.trap()

-------------------------------------------------------------------
/alt/sleep
head: sleep for *t* seconds
types:
    @param {number} t - time to wait in seconds
    @returns {Promise} - a promise that will be resolved in *s* seconds

details:
Convenient to use with *await* in an *async* function.

-------------------------------------------------------------------
/alt/print
head: output a line on the text console
types:
    @param {string} line - a lite to print

details:
The line is followed by a line feed.

Redefine /sys/print to change the output target or behavior.

-------------------------------------------------------------------
/alt/input
head: input a value form the text console
types:
    @param {string} message - an input message to print out
    @returns {Promise -> string} - a promise to return an input string

details:
Returns a promise, so better used in *async*
functions along the *await* keyword.

Redefine /sys/input to change behavior.

-------------------------------------------------------------------
/alt/say
head: show a message in the most convenient way for the current mode
types:
    @param {string} message - an input message to say

details: Redefine /sys/say to change the output target or behavior.

-------------------------------------------------------------------
/alt/ask
head: ask a value in the most convenient way for the current mode 
types:
    @param {string} question - a question
    @returns {Promise -> string} - a promise to return an input string
details: Redefine /sys/ask to change output target or behavior.

-------------------------------------------------------------------
/alt/cls
head: clear the text console

-------------------------------------------------------------------
/alt/require
head: get a dependent node 
types:
    @param {string} path - a mod-relative path to the dependent node

details:
Collider.JAM checks the dependencies in require() before
the script evaluation. If not found, the script evaluation
is rescheduled into the last batch.

Be aware of cyclic dependencies, since these 
can cause an endless loop!

_Collider.JAM code rarely needs require()_,
since most of the objects will be available
before the setup() and start of the game loop.
Use ONLY when you need a dependency during
the script evaluation time (e.g. you are extending
a particular prototype and need it's instance).

You can also use *@depends* directive as an alternative:

    // @depends(mod/local/path)

This directive depends on the path in mod definition,
rather that actual lookup in the mod itself.

Use it when you need to make sure before the script evaluation,
that dependent resources are already evaluated.
But you actually don't need the node itself.

Use require() if you need to extract and use a dependent node
during script evaluation.

/alt/assert
head: assert a condition, throw exception if failed 
types:
    @param {boolean} condition - a logical expression that is expected to evaluate in true to pass
    @param {string} message - an error message for failed assertion
    @returns {boolean} - assumed always to be true
details:
Has a number of refinement functions for convenience:

    assert.number(...)
    assert.string(...)
    assert.object(...)
    assert.fun(...)
    assert.empty(...)
    assert.notEmpty(...)
The interface is the same as in assert(condition, message).

/alt/$$
head: Not Implemented Yet, designed to be a global application function, something like jQuery $().

