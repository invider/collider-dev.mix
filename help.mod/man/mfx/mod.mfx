-------------------------------------------------------------------
/sys/Mod
tags: core
head: defines a game or subsystem structure
details:
Each mod can be considered to be a mini-game
that defines layout to place components.

/sys/Mod/prototype/evo
head: evolve mod state
details: calls lab.evo()

/sys/Mod/prototype/draw
head: draw the mod
details: calls lab.draw()

-------------------------------------------------------------------
/sys/Mod/prototype/getMod
head: returns this object
types:
@returns {object/Mod} - this

-------------------------------------------------------------------
/sys/Mod/prototype/getRoot
head: get the root mod
types:
@returns {object/Mod}

-------------------------------------------------------------------
/sys/Mod/prototype/touch
head: makes sure specified container exists in the path, creates a new one if needed
types:
@param {string} path - a path to a frame
details:
  lab.touch('bot/mob')
will create a Frame named 'bot' inside 'lab'
and then will create a Frame named 'mob' inside 'bot'.

/sys/Mod/prototype/populateAlt
head: a service call to populate mod/alt node called on the mod construction 

/sys/Mod/prototype/init
head: a service function to initialize the mod on attachment

/sys/Mod/prototype/_runTests
head: a service call to run included tests

/sys/Mod/prototype/start
head: a service call to setup the mod and start it's evolution
notes: Called automatically when Collider.JAM starts the game.

/sys/Mod/prototype/inherit
head: a service call to inherit parent mod nodes on startup
notes: Called automatically when Collider.JAM creates the mod.

/sys/Mod/prototype/onAttached
head: handle an attached subnode.

/sys/Mod/prototype/patch
head: patch the node at particular path
types:
@param {object} target - the base node for attachment
@param {string} path - a path relative to the target node
@param {object} node - the node to attach

/sys/Mod/prototype/pause
head: pause this mode evolution

/sys/Mod/prototype/pauseLab
head: pauses this mod /lab and /cue frames

/sys/Mod/prototype/pauseAll
head: pauses this mode and all included mods

/sys/Mod/prototype/resume
head: resume this mode evolution

/sys/Mod/prototype/resumeLab
head: resume this mod /lab and /cue frames

/sys/Mod/prototype/resumeAll
head: resume this mod and all included

/sys/Mod/prototype/hide
head: hide this mod

/sys/Mod/prototype/hideLab
head: hide /lab

/sys/Mod/prototype/hideAll
head: hide this mode and all included submodes

/sys/Mod/prototype/show
head: show this mod

/sys/Mod/prototype/showLab
head: show /lab

/sys/Mod/prototype/showAll
head: show this mod and all included submodes

/sys/Mod/prototype/disable
head: disable incoming events for this mod

/sys/Mod/prototype/disableAll
head: disable incoming events for this mod and all included submodes

/sys/Mod/prototype/enable
head: enable incoming events for this mod

/sys/Mod/prototype/enableAll
head: enable incoming events for this mod and all included submodes

/sys/Mod/prototype/on
head: show, resume and enable all

/sys/Mod/prototype/off
head: hide, pause and disable all

/sys/Mod/prototype/patchNode
head: a service call to load or reload a particular unit/path
details: Used by hot-patching engine to reload updated files.

/sys/Mod/prototype/batchLoad
head: a service call to schedule a load of a resource
types:
@param {number} batch - batch number
@param {string} url - resource url
@param {object/Frame} base - resource base
@param {string} path - attach point for the loaded resource
@param {function} after - a callback function to call after the resource is loaded

/sys/Mod/prototype/loadUnits
head: a service call to load all units
types:
@param {object} baseMod - a mod to load units in
@param {string} target - a loading target path
details: Used by Collider.JAM on boot-up to load all files included in target path




