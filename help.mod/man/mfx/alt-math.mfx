-------------------------------------------------------------------
-- core math --
-------------------------------------------------------------------

/alt/E
head: Euler's constant and the base of natural logarithms
tags: math

/alt/PI
head: ratio of a circle's circumference to it's diameter 
tags: math

/alt/PI2
head: double PI constant
tags: math

/alt/TAU
head: double PI alternative name
tags: math

/alt/HALF_PI
head: half the PI constant
tags: math


-------------------------------------------------------------------
/alt/abs

head: returns the absolute value of *n*
tags: math
types:
    @param {number} n
    @returns {number}
notes: Just a reference to Math.abs().

-------------------------------------------------------------------
/alt/sign

head: returns the sign value of a number (-1 or 1 or -0/0 for zero values)
tags: math
types:
    @param {number} n
    @returns {number} - [ 1 | -1 | 0 | -0 ]
notes: Just a reference to Math.sign().

-------------------------------------------------------------------
/alt/pow

head: returns *n* raised to the power of *p*
tags: math
types:
    @param {number} n
    @param {number} p
    @returns {number}
notes: Just a reference to Math.pow().

-------------------------------------------------------------------
/alt/sqrt

head: returns the positive square root of *n*
tags: math
types:
    @param {number} n
    @returns {number}
notes: Just a reference to Math.sqrt().


-------------------------------------------------------------------
/alt/min

head: returns the smallest of numbers
tags: math
types:
    @param {number} n1
    @param {number} n2
    @param {number} ... - additional optional numbers
    @returns {number}

details:
Running without parameters returns Infinity
    min() === Infinity
notes: Just a reference to Math.min().

-------------------------------------------------------------------
/alt/max

head: returns the largest of numbers
tags: math
types:
    @param {number} n1
    @param {number} n2
    @param {number} ... - additional optional numbers
    @returns {number}

details:
Running without parameters returns -Infinity
    max() === -Infinity
notes: Just a reference to Math.max().

-------------------------------------------------------------------
/alt/ceil

head: returns the smallest integer greater than or equal to *n*
tags: math
types:
    @param {number} n
    @returns {number}
notes: Just a reference to Math.ceil().

-------------------------------------------------------------------
/alt/floor

head: returns the largest integer less than or equal to *n*
tags: math
types:
    @param {number} n
    @returns {number}
notes: Just a reference to Math.floor().

-------------------------------------------------------------------
/alt/round

head: returns *n* rounded to the nearest integer
tags: math
types:
    @param {number} n
    @returns {number}
notes: Just a reference to Math.round().

-------------------------------------------------------------------
/alt/sin

head: returns the sine of the angle *a*
tags: math
types:
    @param {number/radians} a
    @returns {number}
details: The angle *a* is in radians.
notes: Just a reference to Math.sin().

-------------------------------------------------------------------
/alt/cos

head: returns the cosine of the angle *a*
tags: math
types:
    @param {number/radians} a
    @returns {number}
details: The angle *a* is in radians.
notes: Just a reference to Math.cos().

-------------------------------------------------------------------
/alt/tan

head: returns the tangent of the angle *a*
tags: math
types:
    @param {number/radians} a
    @returns {number}
details: The angle *a* is in radians.
notes: Just a reference to Math.tan().

-------------------------------------------------------------------
/alt/asin

head: returns the arcsine of the number *n*
tags: math
types:
    @param {number} n
    @returns {number}
details: Arcsine is the angle in radians, whose sine is *n*.
notes: Just a reference to Math.asin().

-------------------------------------------------------------------
/alt/acos

head: returns the arccosine of the number *n*
tags: math
types:
    @param {number} n
    @returns {number}
details: Arccosine is the angle in radians, whose cosine is *n*.
notes: Just a reference to Math.acos().


-------------------------------------------------------------------
/alt/atan

head: returns the arctangent of the number *n*
tags: math
types:
    @param {number} n
    @returns {number/radians}
details: Arctangent is the angle in radians, whose tangent is *n*.
notes: Just a reference to Math.atan().


-------------------------------------------------------------------
/alt/atan2

head: returns an angle whose tangent is *y/x*
tags: math
types:
    @param {number} y
    @param {number} x
    @returns {number/radians}
details: Arctangent of two is the angle in radians, whose tangent is *y*/*x*.
notes:
Note, that *y* goes first and *x* after. It can be confusing sometimes.

This function is just a reference to Math.atan2().




-------------------------------------------------------------------
-- custom math --
-------------------------------------------------------------------

-------------------------------------------------------------------
/alt/rnd

head: returns a pseudo-random number between [0..1] or between provided values
tags: math
types:
    @param {number} n1 - (optional) the bottom limit or the top limit when n2 is missing
    @param {number} n2 - (optional) the top limit
    @returns {number} - a random number between provided values
details:
When both *n1* and *n2* are provided, it returns a value between *n1*..*n2*.

When there is only *n1* present, it returns a value between 0..*n1*, excluding n1.

When no parameters are provided, it returns a value between 0..1, excluding 1.

-------------------------------------------------------------------
/alt/RND

head: returns a pseudo-random integer between provided values
tags: math
types:
    @param {number/integer} i1 - the bottom limit or the top limit when i2 is missing
    @param {number/integer} i2 - (optional) the top limit
    @returns {number} - a random integer number between provided values
details:
When both values are provided, returns a value between *i1*..*i2*, i2 included.

When only one provided, the returned value is in the range of 0..*i1*, i1 included.

When no parameters are provided, it returns 0.

note: Keep in mind the top limit, which included in the resulting range
of random values. This behavior is different from the one
of floating point functions liek <a href="./alt/rnd">rnd(n1, n2)</a>.


-------------------------------------------------------------------
/alt/clamp

head: clamps provided *v* between values *n1* and *n2*
tags: math
types:
    @param {number} v - the tested value
    @param {number} n1 - the bottom limit
    @param {number} n2 - the top limit
    @returns {number} - a value clamped into [n1..n2] range
details:
For *v*<*n1* it would return *n1*.
Then, if *v*>*n2* it would return *n2*.
Otherwise, the original *v* will be returned.

-------------------------------------------------------------------
/alt/within

head: returns *true* if the value *v* is within the specified range.
tags: math
types:
    @param {number} v - a sample value
    @param {number} n1 - the bottom limit
    @param {number} n2 - the top limit
    @returns {boolean} - true, if a value is witin [n1..n2] range
details:
Values of *n1* and *n2* are included in the range,
so within(1, 1, 5) returns *true*.


-------------------------------------------------------------------
/alt/warp

head: returns a value warped within the provided range
tags: math
types:
    @param {number} v - a sample value
    @param {number} n1 - the bottom limit
    @param {number} n2 - the top limit
    @returns {number} - a value warped into [n1..n2] range
details:
You can use this function to normalize an angle.
Just run with 0..PI2 range, e.g.:
    warp(15, 0, PI2)
will bring the angle 15 within normalized range of 0..PI2


-------------------------------------------------------------------
/alt/lerp

head: returns a value between 0..1 extrapolated to the range between *start*..*stop*
tags: math
types:
    @param {number} start - a start value
    @param {number} stop - a stop value
    @param {number} val - interpolation rate, usually in the range of [0..1]
    @returns {number} - an extrapolated value

-------------------------------------------------------------------
/alt/remap

head: remap the *val* from *start*..*stop* range to *targetStart*..*targetStop* range
tags: math
types:
    @param {number} val - a value to map
    @param {number} start - a start value of the original range
    @param {number} stop - a stop value of the original range
    @param {number} targetStart - a start value of the target range
    @param {number} targetStop - a stop value of the target range
    @returns {number} - a value mapped to [targetStart..targetStop] range

details:
Swap the target start and stop values to reverse the mapping,
e.g. remap(0.25, 0, 1, 1, 0) => 0.75

-------------------------------------------------------------------
/alt/dist

head: returns the distance between two points
tags: math
types:
    @param {number} x1 - first point x coordinate
    @param {number} y1 - first point y coordinate
    @param {number} x2 - second point x coordinate
    @param {number} y2 - second point y coordinate
    @returns {number} - a distance between two provided points

-------------------------------------------------------------------
/alt/len

head: returns the length of the vector *[x, y]*
tags: math
types:
    @param {number} x - vector x coordinate
    @param {number} y - vector y coordinate
    @returns {number} - a distance 


-------------------------------------------------------------------
/alt/angleTo

head: returns the angle in radians between the vector *[x, y]* and OX
tags: math
types:
    @param {number} x - vector x coordinate
    @param {number} y - vector y coordinate
    @returns {number/radians} - an angle between the provided vector and OX
notes:
It is actually atan2(y, x) with swapped coordinates.
Do we really need 2 functions doing the same thing?

-------------------------------------------------------------------
/alt/bearing

head: returns the angle of direction vector from *[x1, y1]* to *[x2, y2]* in relation to OX axis
tags: math
usage: (x1, y1, x2, y2)
types:
    @param {number} x1 - first vector x coordinate
    @param {number} y1 - first vector y coordinate
    @param {number} x2 - second vector x coordinate
    @param {number} y2 - second vector y coordinate
    @returns {number/radians} - an angle of direction vector from [x1:y1] to [x2:y2]

notes:
Want to shoot a laser toward an enemy spaceship?

This function is what you need!

Get the aim angle by providing the coordinates
of your laser gun and the enemy ship. Ready? Fire!

