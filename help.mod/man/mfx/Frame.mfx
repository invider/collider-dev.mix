-------------------------------------------------------------------
/sys/Frame
tags: core
head: a group node
details:
Frame constructs a basic node container
to manage node collections.

Named nodes (the ones with 'name' property defined)
are stored in a directory *[_dir]* object.

All nodes can be accessed by index in *[_ls]*.

The named nodes have direct shortcuts
in the Frame object, so can be accessed
directly from the frame node as *node.childName*.
However, to list named nodes use ._dir,
since the Frame object itself has a bunch
of service fields like __, attach(), detach() etc...

-------------------------------------------------------------------
/sys/Frame._frame
head: always *true* for any kind of frame.
notes:
*TODO* maybe migrate to a duck-typing style definition
when any node with _dir object and _ls array is considered to be a frame.

-------------------------------------------------------------------
/sys/Frame/prototype/path
head: returns the path of the node
types:
@returns {string/path} - absolute path in the mix
note:
The parent must be present to determine the path,
so it obviously doesn't work for orphaned nodes.

-------------------------------------------------------------------
/sys/Frame/prototype/getMod
head: get parent mod object
types:
@returns {object/Mod} - parent mod
note:
The parent must be present to determine the mod,
so it obviously doesn't work for orphaned nodes.

-------------------------------------------------------------------
/sys/Frame/prototype/touch
head: makes sure the specified container exists in the path, creates a new one if needed
types:
@param {string} path - a path to a frame
details:
  lab.touch('bot/mob')
will create a Frame named 'bot' inside 'lab'
and then will create a Frame named 'mob' inside 'bot'.

Now you can spawn bots in _/lab/mob/bot_
  lab.mob.bot.spawn(MyBot, {...})

-------------------------------------------------------------------
/sys/Frame/prototype/attach
head: adds a node to a frame
types:
@param {value} node
@param {string} [name] - optional name
details:
When _name_ is not specified, tries to take it from the object itself.

-------------------------------------------------------------------
/sys/Frame/prototype/onAttached
head: a service method to propagate attach notifications
types:
@param {value} [node] - optional attached node (empty for the attached node itself)
details:
Has default behavior, so shouldn't be redefined for now.


> TODO make it reassianable and move features to 2 additional service methods
one for attached node, another - for frames up the tree

-------------------------------------------------------------------
/sys/Frame/prototype/link
head: links a node to the frame without attaching it
types:
@param {value} node
@param {string} [name] - optional name
notes:
Use when you don't want to change node's parent,
but still want that node to be listed in another frame.

Doesn't exclude similary named nodes from the frame.
Use xlink() instead if you need name exclusivity.

-------------------------------------------------------------------
/sys/Frame/prototype/xlink
head: exclusively links a node to the frame without attaching it
types:
@param {value} node
@param {string} [name] - optional name
notes:
Use when you don't want to change child node's parent
and need exclusivity of the name.
Any node with the same name will be detached.

-------------------------------------------------------------------
/sys/Frame/prototype/detach
head: detach a node
types:
@param {object} node
notes:
With undefined node the whole frame got removed.
We are not satisfied with accidental complexity in that call.
~TODO split into 2 different methods by intent~

-------------------------------------------------------------------
/sys/Frame/prototype/detachAll
head: detach all nodes

-------------------------------------------------------------------
/sys/Frame/prototype/detachByName
head: detach a node by name
types:
@param {string} name - node's name

-------------------------------------------------------------------
/sys/Frame/prototype/apply
head: apply a function to all child nodes, possibly filtered by a predicate
types:
@param {function} fn - a function to apply
@param {function/string} predicate - a predicate to filter out the nodes
details:
A predicate function accepts a child node and returns
_true_ if the function needs to be applied to that node
and _false_ if doesn't.
A predicate also can be a select string.

-------------------------------------------------------------------
/sys/Frame/prototype/applyAll
head: apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate
types:
@param {function} fn - a function to apply
@param {function/string} predicate - a predicate to filter out the nodes
details:
Works recursivelly on all child subframes.
A predicate function accepts a child node and returns
_true_ if the function needs to be applied to that node
and _false_ if doesn't.
A predicate also can be a select string.

-------------------------------------------------------------------
/sys/Frame/prototype/collide
head: collides the child nodes, e.g. apply function to all pair combinations
@param {function} fn - a function to apply
@param {function/string} predicate - a predicate to filter out the nodes
details:
Can be used in collision-detection scenarios,
when you need to compare each node with any other node.

A predicate function accepts a child node and returns
_true_ if the function needs to be applied to that node
and _false_ if doesn't.
A predicate also can be a select string.

-------------------------------------------------------------------
/sys/Frame/prototype/select
head: select instances matching the string or function predicate
types:
@param {string} path
details:
String predicates are in path format and can include special characters:

    * - match all children
    ^ - match the tag
    #<id> - deep select by <id>
    &<name> - deep select by <name>
    ~<type> - deep select by <type>

Some usage examples:

    _$.select('/res/sfx/*')          // select all sound effects in sfx
    dna.select('hud/Window')         // select hud.Window
    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud
    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA
    lab.select('&hero')              //select from lab all nodes with name === 'hero'

-------------------------------------------------------------------
/sys/Frame/prototype/selectOne
head: select a single node matching the string or function predicate
types:
@param {string} predicate
details:
The same, as select(), but returns the top result.

Look at [select()](#./sys/Frame/select) for predicate syntax details.

-------------------------------------------------------------------
/sys/Frame/prototype/selectInstanceOf
head: returns the list of included nodes of provided type
types:
@param {prototype} of - a value to match instanceof

-------------------------------------------------------------------
/sys/Frame/prototype/map
head: applies a function to all child nodes and returns the array of results
types:
@param {function} fn - a map function
@param {array} accumulator - an optional array to gather values in
@returns {array} - array of mapped values

-------------------------------------------------------------------
/sys/Frame/prototype/flatMap
head: recursively applies a function to all descendants and returns the array of results
types:
@param {function} fn - a map function
@param {array} accumulator - an optional array to gather values in
@returns {array} - array of recursively mapped values

-------------------------------------------------------------------
/sys/Frame/prototype/filter
head: filter out nodes with a predicate function
types:
@param {function} fn - a predicate function
@returns {array/nodes} - array of filtered nodes

-------------------------------------------------------------------
/sys/Frame/prototype/find
head: recursive search for nodes
types:
@param {function} predicate - a predicate function

-------------------------------------------------------------------
/sys/Frame/prototype/reduce
head: reduce child nodes
types:
@param {function(accumulator, node, i, frame)} fn - a reduce function
@param {value} initVal - a start value, first node by default

-------------------------------------------------------------------
/sys/Frame/prototype/reduceRight
head: reduce right child nodes - the same as _reduce_, by starts from the end
types:
@param {function(accumulator, node, i, frame)} fn - a reduce function
@param {value} initVal - a start value, first node by default

-------------------------------------------------------------------
/sys/Frame/prototype/kill
head: kill the node and all the childs
-------------------------------------------------------------------

