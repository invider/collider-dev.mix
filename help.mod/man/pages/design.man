name: Design

*Collider.JAM* is a highly opinionated framework.

=== Feature Creep

Most of the game frameworks and engines out there
are fixated on features.
Usually, you can find a long list of features
showing off on their landing page.

But Collider.JAM is not about features.

You don't actually need a lot of features to create a simple game.
Usually, all you need is the ability to load resources,
draw simple shapes, images and text, play some sounds,
and accept user input.



=== Unique

In the crowded game tooling world,
it is really hard to find a unique tool.
All mainstream frameworks and engines
borrow features from one another
and any given feature can be found
in multiple products.

So it seems strange to claim that something
is unique in such saturated market.

But only in the feature-driven world.

When we are talking about indie game development,
there are not so many features you actually need.
So it shouldn't be about the features,
but rather how those features are
organized and accessed.

The differences in tooling and development pipeline
can have a huge impact on the development flow
and productivity.
Neatly selected and organized features
can provide the clarity necessary
for creative process.
You can't be creative while strugling
with complex feature-rich technology.

_There is nothing new in Collider.JAM._

However, a set of carefully selected
and orthogonal features and the way
those features are organized
is what makes Collider.JAM so unique.

Most of today's game development frameworks and tools
look like clones of the powerhouses
of the industry.
Both Unity and Unreal are highly successful
engines offering a proven development
model. It is based on IDE-like editor
with higly sophisticated tabs and menues, 
and a rich ecosystem of classes and plugins.
No woner other tools try to capitalize
on Unity/Unreal success by emulating their approach.

_Collider.JAM is nothing like that._
It's development approach is different.
More lightweight and less intrusive.

It's not better or worse...
It's just an alternative to existing mainstream.

It provides a different feel when you develop,
build, debug and playtest your game.
It might seem unusual at first,
but you will experience a true Zen,
once you'll get the power of jamming.

And in the world where all tools
are merging and starting to look
like each other.
A fresh look might be a good thing.



=== Coming from Game Jams
Collider.JAM has been conceived after
our participation in multiple game jams.

So creativity, hyper-focus and prototyping speed
are the most appreciated qualities.
Game jamming inspires innovation and suggests
a particular approach in development.
That approach has enourmous influence
on Collider.JAM design.



=== Choose simplicity over efficiency
There are number of opinionated choices in Collider.JAM design.

Among them are:

* Zero dependencies to keep it lean and consistent
* Everything is placed in a single tree hierarchy
* Everything can be accessed by moving up and down that hierarchy
* A project folder structure and names are reflected in Collider.JAM hierarchy
* Resources are loaded, placed and named automatically
* You manipulate with plain JavaScript objects following some conventions
* The scope is augmented with core structures and functions to simplify the access
* An object place in the tree determines behavior
* Core names are short and cryptic to reduce the noise
* Skip the boilerplate
* Use convention over configuration
* Autolink everything - there is no need for implicit import/export in Collider.JAM
* Keep iteration cycles as short as possible

Application of those principles throughout the whole system
is what makes Collider.JAM approach so unique
and very suitable for rapid game prototyping, game jamming and hackathons.



=== Collider.JAM Ring

The core of the framework is the Ring.

It is responsible for the framework
boot and scene construction.

Once everything is loaded and binded
into a single scene, it starts the game loop
to evolve the scene.

The Ring is contained within a file called
collider.js and it is actually the only
file needed to be included in HTML.
(Not that you have to bother with
such stuff - collider is providing
or generating a proper index.html
file for you.)

Only the most essential definitions
and neccessary boilerplace are included.
Everything else is loaded and mixed in
as part of provided or optional mixes.



=== Everything is in the Mix
A *mix* is a virtual file system that represents
a scene graph and all accessible resources.

Compared to a traditional scene graph
where only game entities are placed and structured,
a *mix* contains every bit of a game.
All resources like images and sound,
standard libraries and prototypes,
game entities and configurations -
all that is placed in the mix somewhere.

<h3>Everything is in it's right place...</h3>
Mix is a virtual file system because
every game object is placed in a tree-like
structure. And that placement can determine
the properties and behavior of that object.

Placing an object in _/lab_ makes it alive,
providing that the object has functions
_evo(dt)_ and draw() to manifest it's
behavior and visual appearance.

Objects placed in _/dna_ are considered to be
constructors and factories. We place objects
in _/dna_ to be able to spawn them later.

Objects in _/trap_ can react on system-wide events
like start of the game, key press or mouse move.
Declare a function spaceDown() and place it in trap:

     /trap/spaceDown.js
It will be called every time the _Spacebar_ is pressed.

<h3>Node is just an Object</h3>
When objects are loaded and placed as nodes in the mix,
there is nothing speciall going on.
These are still plain simple JavaScript objects.
You don't have to extend a Node prototype or do anything like that.

Only group nodes in the tree are considered special
and should follow conventions defined in a Frame prototype.
Any JavaScript object can be added as a leaf with Frame.attach() method.
The only effect on the object itself is some special properties
that will be specified. Like a link to the parent node.
But there could be other flags, all starting with underscore.

<h3>Resources are already there</h3>
In _Collider.JAM_ you spend minimal time managing resources.
Just place the files in _/res_ folder of your _mod_
and you have them available in the game.
The convention is that resources are named after their
file names without extention.

So place an image into res:
    _game.mod/res/hero.png_
And it can be accessed as _res.hero_ and is going to be
just a standard JS HTMLImageElement.

<h3>A node in /lab lives and evolves</h3>
This is a crucial element of Collider.JAM design.

To create a game entity, you don't have to extend from any prototype,
use factory or do any other special form of construction.

You can place an object directly in /lab, implement
several convention methods, and it will be alive.

Just place in _/lab/circle.js_:

    let x = rx(.2)
    let y = ry(.5)

    function evo(dt) {
        x += 50 * dt
        y += 15 * dt
    }

    function draw() {
        stroke(.6, .5, .5)
        cirlce(x, y, 50)
    }

Run that mod with Collider.JAM and you will see a flying circle.

Note, that we don't have to do any form of import or export anywhere.
Collider.JAM does all the magic of loading, setting up and linking
all game components and resources in a single tree.

<h3>File system folders are reflected in the mix</h3>
All files in a game project folder are loaded
and placed in the tree according to their position
and names on the file system. 

So, a file in

    game.mod/dna/mob/ScaryMonster.js
Will be available anywhere in that mod as:

    dna.mob.ScaryMonster
The mod file structure is reflected on the mix.

Multiple mods and fixes are loaded at the root to create
a running mix. Since any mix needs all kind
of standard features.

Usually, a mix loads a bunch of fixes
like _fix_, _lib.fix_ and _hud.fix_ to include
some standard Collider.JAM features.

Also, a bunch of development mods are included
for convenience - such as console.mod,
inspector.mod and help.mod. But these
are not loaded at the root of a mix,
but go into a /mod node.

<h3>Each mod is a mini-game</h3>
Each mod repeats the root structure.
E.g. it has /res, /dna, /env, /lab, /trap...

So any mod can have it's own event handling,
resources and entities.
It is a little world that can run isolated
from other parts of the app.



=== These Strange Cryptic Names
The core names in Collider.JAM are short and cryptic.
This is by design.

Since these names are in the center of any mix,
they will be used countless times.
There is a common misconception that long descriptive
names are reducing cognitive load a programmer has to
deal with to understand the code. And while it might
be true to a rarelly used parts, it is not so
when we are considering the core of the system.

The core is used so often, that short and cryptic names
are actually reducing the cognitive load.
You'll learn the meaning of all terms and shortcuts eventually.
But the result is clean and simple code with minimum noise.

Here we are exploiting decades of UNIX tradition.
All these /bin, /etc, /home and /var are not that
descriptive, but very easy to work with, considering
you typing them hundred times a day.

The oppositve view can be found in Windows with
an ugly and uncomprehensible "Program Files" folder
(you can't even type that in console without
touching Shift and escaping the space!).

We prefer the former approach. It is less to type.
It is simpler. It is much cleaner.



=== The most used stuff is already in scope
All core functions and nodes of Collide.JAM
are available directly in scope.

So instead of heavy object-oriented constructions like:

    const a = Math.sin(fi)
    
    console.log('draw a line')
    ctx.moveTo(100, 100)
    ctx.LineTo(200, 100)

    console.log('draw an image')
    const img = loader.load('hero.png')
    ctx.drawImage(img, 0, 0, 64, 64)
    

In Collider.JAM you can say:

    const a = sin(fi)
    log('draw a line')
    line(100, 100, 200, 100)

    log('draw an image')
    image(res.hero, 0, 0, 64, 64)

Many simple operations are just straighforward calls
to functions or direct access to mod nodes in scope,
like res, dna, lab, trap,  _ (current mod), _$ (root mod) etc.

That voodoo magic is possible because of the clever
tricks Collider.JAM performs while loading the mix.



=== Inspiration
Nothing is really new in this industry,
and we always build our software
on the foundation and experience
of brave pioneers who have already
explored and developed inovative ideas.

Some of these ideas have blowed the software
industry by storm (like Java or Docker).
Some took decades to build up
(like JavaScript or Functional Programming).
Some never got into the mainstream... Yet.
But these ideas are never really gone.
Sometimes they require the right time and place to blossom.
And they can stay dormant for decades until
somebody take them, rethink then,
and build a totally new revolutionary product.

The Convention over Configuration approach
has been used for years in many web frameworks.
Ruby on Rails is an inspiration and example of simplicity
you can reacy by applying these principles.

<a href="https://processing.org">Processing</a>
and a cool JavaScript library called
<a href="https://p5js.org/">p5js</a>
were true inspiration in the way
_Collider.JAM_ scope is organized.

Lua-based <a href="https://love2d.org/">LÖVE</a>
is a perfect example of minimalistic
approach in game framework design.

In general, UNIX philosophy played a significant role
in _Collider.JAM_ architectural style.
Minimalistic but conceptually-rich
Plan 9 and Inferno operating systems (Bell Labs/Lucent)
were guiding stars in consistent and lightweight
systems design. Definitely, not a source of features
for a game framework per se,
still an infinite source of inspiration
and iconic example of superb engineering.
